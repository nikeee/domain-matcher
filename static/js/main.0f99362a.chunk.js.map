{"version":3,"sources":["tlds.ts","App.tsx","index.tsx"],"names":["DOMAINS_FILE","_callee","domainsUpper","regenerator_default","a","wrap","_context","prev","next","fetch","then","r","text","sent","abrupt","toLowerCase","split","filter","line","trim","startsWith","stop","getPossbileTLDs","tlds","desired","possible","tld","endsWith","length","concat","map","slice","App","p","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChangeDesiredNames","ev","value","target","s","state","undefined","setState","desiredNames","possibleDomains","f","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","name","err","return","_fetchTLDs","apply","arguments","fetchTLDs","possibleList","react_default","createElement","values","flat","className","d","key","htmlFor","id","rows","onChange","PureComponent","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.0f99362a.chunk.js","sourcesContent":["const DOMAINS_FILE = \"domains.txt\";\n\nexport type TLD = string;\n\nexport async function fetchTLDs(): Promise<TLD[]> {\n\tconst domainsUpper = await fetch(DOMAINS_FILE).then(r => r.text());\n\treturn domainsUpper\n\t\t.toLowerCase()\n\t\t.split(\"\\n\")\n\t\t.filter(line => line.trim() !== \"\" && !line.trim().startsWith(\"#\"));\n}\n\nexport function getPossbileTLDs(tlds: TLD[], desired: string) {\n\tconst possible = tlds.filter(tld => desired.endsWith(tld));\n\treturn possible.length === 0\n\t\t? [`No match for <${desired}>`]\n\t\t: possible.map(tld => desired.slice(0, -tld.length) + \".\" + tld);\n}\n","import React, { PureComponent, ChangeEvent } from \"react\";\n\nimport \"./App.css\";\nimport { fetchTLDs, getPossbileTLDs, TLD } from \"./tlds\";\n\n\ninterface StateTLDsLoaded {\n\ttlds: TLD[];\n\tdesiredNames: string[];\n\tpossibleDomains: Record<string, string[]>;\n}\ninterface StateInitial {\n\ttlds: undefined;\n\tdesiredNames: string[];\n\tpossibleDomains: undefined;\n}\n\ntype State = StateTLDsLoaded | StateInitial;\ninterface Props {\n}\n\nexport default class App extends PureComponent<Props, State> {\n\tconstructor(p: Props) {\n\t\tsuper(p);\n\n\t\tthis.state = {\n\t\t\ttlds: undefined,\n\t\t\tdesiredNames: [],\n\t\t\tpossibleDomains: undefined,\n\t\t};\n\n\t\tfetchTLDs()\n\t\t\t.then(tlds => this.setState({\n\t\t\t\ttlds,\n\t\t\t\tpossibleDomains: undefined,\n\t\t\t}));\n\t}\n\n\tonChangeDesiredNames = (ev: ChangeEvent<HTMLTextAreaElement>) => {\n\t\tconst value = ev.target.value.trim();\n\t\tconst s = this.state;\n\n\t\tif (!value || s.tlds === undefined) {\n\t\t\treturn this.setState({\n\t\t\t\tdesiredNames: [],\n\t\t\t\tpossibleDomains: undefined,\n\t\t\t});\n\t\t}\n\t\tconst desiredNames = value.toLowerCase()\n\t\t\t.split(\"\\n\")\n\t\t\t.filter(f => !!f && !!f.trim());\n\n\t\tif(desiredNames.length === 0) {\n\t\t\treturn this.setState({\n\t\t\t\tdesiredNames: [],\n\t\t\t\tpossibleDomains: undefined,\n\t\t\t});\n\t\t}\n\n\t\tconst possibleDomains: Record<string, string[]> = {};\n\t\tfor (const name of desiredNames)\n\t\t\tpossibleDomains[name] = getPossbileTLDs(s.tlds, name);\n\n\t\tthis.setState({\n\t\t\tdesiredNames,\n\t\t\tpossibleDomains,\n\t\t});\n\t}\n\n\trender() {\n\t\tconst s = this.state;\n\t\tif (s.tlds === undefined)\n\t\t\treturn (<h1>Loading TLDs...</h1>);\n\n\t\tlet possibleList;\n\t\tif (s.possibleDomains === undefined) {\n\t\t\tpossibleList = <h2>Type some string</h2>;\n\t\t} else {\n\t\t\tconst possible = Object.values(s.possibleDomains).flat();\n\t\t\tpossibleList = (\n\t\t\t\t<div className=\"card\">\n\t\t\t\t\t<div className=\"card-header\">Possbile Domains</div>\n\t\t\t\t\t<ul className=\"list-group list-group-flush\">\n\t\t\t\t\t\t{possible.map(d => (<li key={d} className=\"list-group-item\"><code>{d}</code></li>))}\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\treturn (\n\t\t\t<main>\n\t\t\t\t<h1>Got {s.tlds.length} TLDs</h1>\n\t\t\t\t<div className=\"card\">\n\t\t\t\t\t<div className=\"card-header\">\n\t\t\t\t\t\t<label htmlFor=\"desiredNames\">Desired Names:</label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"card-body form-group\">\n\t\t\t\t\t\t<textarea id=\"desiredNames\" className=\"form-control\" rows={10} onChange={this.onChangeDesiredNames} />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t{possibleList}\n\t\t\t</main>\n\t\t);\n\t}\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n\t<App />,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}